(define (domain rover)
    (:requirements :typing :fluents :preferences :durative-actions :disjunctive-preconditions :constraints :negative-preconditions)
    (:types robot coordinate speed)
    (:predicates (at ?r - robot ?c - coordinate)
                 (photo ?c - coordinate)
                 (drilled ?c - coordinate)
                 (communicated ?r - robot ?c - coordinate)
                 (analyzed ?c - coordinate)
                 (iddle ?r - robot)
    )
    (:functions
        (battery-capacity ?r - robot)
        (battery-amount ?r - robot)
        (low-battery ?r - robot)
        (robot-speed ?s - speed)
        (distance ?c1 ?c2 - coordinate)
    )
    (:durative-action move
        :parameters (?r - robot ?from ?to - coordinate ?s - speed)
        :duration (= ?duration (* (/ 2 (robot-speed ?s)) (distance ?from ?to)))
        :condition (and (at start (at ?r ?from))
                        (at start (iddle ?r))
                        (at start (< (low-battery ?r) (battery-amount ?r))))
        :effect (and (at start (not (at ?r ?from)))
                     (at start (not (iddle ?r)))
                     (at end (at ?r ?to))
                     (at end (iddle ?r))
                     (at end (decrease (battery-amount ?r) (* (* (robot-speed ?s) 5) (distance ?from ?to)))))
    )
    (:durative-action take_picture
        :parameters (?r -robot ?c - coordinate)
        :duration (= ?duration 0.5)
        :condition (and (over all(at ?r ?c))
                        (at start (iddle ?r))
                        (at start (< (low-battery ?r) (battery-amount ?r))))
        :effect (and (at start (not (iddle ?r)))
                     (at end (photo ?c))
                     (at end (iddle ?r))
                     (at end (decrease (battery-amount ?r) 2)))
    )
    (:durative-action drill
        :parameters (?r - robot ?c - coordinate)
        :duration (= ?duration 2)
        :condition (and (over all (at ?r ?c))
                        (at start (iddle ?r))
                        (at start (< (low-battery ?r) (battery-amount ?r))))
        :effect (and (at start (not (iddle ?r)))
                     (at end (drilled ?c))
                     (at end (iddle ?r))
                     (at end (decrease (battery-amount ?r) 50)))
    )
    (:durative-action communicate
        :parameters (?r - robot ?c - coordinate)
        :duration (= ?duration 0.5)
        :condition (and (over all (at ?r ?c))
                        (at start (iddle ?r))
                        (at start (< (low-battery ?r) (battery-amount ?r))))
        :effect (and (at start (not (iddle ?r)))
                     (at end (communicated ?r ?c))
                     (at end (iddle ?r))
                     (at end (decrease (battery-amount ?r) 5)))
    )
    (:durative-action analyze
        :parameters (?r - robot ?c - coordinate)
        :duration (= ?duration 1)
        :condition (and (over all (at ?r ?c))
                        (at start (iddle ?r))
                        (at start (< (low-battery ?r) (battery-amount ?r))))
        :effect (and (at start (not (iddle ?r)))
                     (at end (analyzed ?c))
                     (at end (iddle ?r))
                     (at end (decrease (battery-amount ?r) 8)))
    )
    (:durative-action recharge_battery
        :parameters (?r - robot)
        :duration (= ?duration (+ 1 (/ (- (battery-capacity ?r) (battery-amount ?r)) 10)))
        :condition (at start (iddle ?r))
        :effect (and (at start (not (iddle ?r)))
                     (at end (iddle ?r))
                     (at end (assign (battery-amount ?r) (battery-capacity ?r))))
    )
    
)